/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 12.1 		*/
/*  Created On : 03-апр-2016 23:51:15 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_ACHIEVEMENT_ACHIEVEMENT_TYPE]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [ACHIEVEMENT] DROP CONSTRAINT [FK_ACHIEVEMENT_ACHIEVEMENT_TYPE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_ACHIEVEMENT_LIST_ACHIEVEMENT]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [ACHIEVEMENT_LIST] DROP CONSTRAINT [FK_ACHIEVEMENT_LIST_ACHIEVEMENT]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_ACHIEVEMENT_LIST_USER]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [ACHIEVEMENT_LIST] DROP CONSTRAINT [FK_ACHIEVEMENT_LIST_USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_DISH_DISH_CATEGORY]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [DISH] DROP CONSTRAINT [FK_DISH_DISH_CATEGORY]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_DISH_USER]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [DISH] DROP CONSTRAINT [FK_DISH_USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_EATING_USER]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [EATING] DROP CONSTRAINT [FK_EATING_USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_FAVORITE_LIST_DISH]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [FAVORITE_LIST] DROP CONSTRAINT [FK_FAVORITE_LIST_DISH]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_FAVORITE_LIST_TIME]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [FAVORITE_LIST] DROP CONSTRAINT [FK_FAVORITE_LIST_TIME]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_FAVORITE_LIST_USER]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [FAVORITE_LIST] DROP CONSTRAINT [FK_FAVORITE_LIST_USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_FOOD_FOOD_CATEGORY]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [FOOD] DROP CONSTRAINT [FK_FOOD_FOOD_CATEGORY]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_FOOD_FOOD_CONSISTENCY_TYPE]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [FOOD] DROP CONSTRAINT [FK_FOOD_FOOD_CONSISTENCY_TYPE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_M2M_DISH_EATING_DISH]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [M2M_DISH_EATING] DROP CONSTRAINT [FK_M2M_DISH_EATING_DISH]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_M2M_DISH_EATING_EATING]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [M2M_DISH_EATING] DROP CONSTRAINT [FK_M2M_DISH_EATING_EATING]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_M2M_DISH_TIME_DISH]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [M2M_DISH_TIME] DROP CONSTRAINT [FK_M2M_DISH_TIME_DISH]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_M2M_DISH_TIME_TIME]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [M2M_DISH_TIME] DROP CONSTRAINT [FK_M2M_DISH_TIME_TIME]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_PORTION_FOOD_DISH]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [PORTION_FOOD] DROP CONSTRAINT [FK_PORTION_FOOD_DISH]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_PORTION_FOOD_FOOD]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [PORTION_FOOD] DROP CONSTRAINT [FK_PORTION_FOOD_FOOD]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_USER_USER_TYPE_ACTIVITY]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [USER] DROP CONSTRAINT [FK_USER_USER_TYPE_ACTIVITY]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_USER_CHARACTERISTICS_USER]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [USER_CHARACTERISTICS] DROP CONSTRAINT [FK_USER_CHARACTERISTICS_USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_USER_CHARACTERISTICS_USER_CHARACTERISTICS_REF]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [USER_CHARACTERISTICS] DROP CONSTRAINT [FK_USER_CHARACTERISTICS_USER_CHARACTERISTICS_REF]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[ACHIEVEMENT]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [ACHIEVEMENT]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[ACHIEVEMENT_LIST]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [ACHIEVEMENT_LIST]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[ACHIEVEMENT_TYPE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [ACHIEVEMENT_TYPE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[DISH]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [DISH]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[DISH_CATEGORY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [DISH_CATEGORY]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[EATING]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [EATING]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FAVORITE_LIST]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [FAVORITE_LIST]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FOOD]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [FOOD]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FOOD_CATEGORY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [FOOD_CATEGORY]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FOOD_CONSISTENCY_TYPE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [FOOD_CONSISTENCY_TYPE]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[M2M_DISH_EATING]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [M2M_DISH_EATING]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[M2M_DISH_TIME]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [M2M_DISH_TIME]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[PORTION_FOOD]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [PORTION_FOOD]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[TIME]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [TIME]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[USER]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [USER]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[USER_CHARACTERISTICS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [USER_CHARACTERISTICS]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[USER_CHARACTERISTICS_REF]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [USER_CHARACTERISTICS_REF]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[USER_CREDANTIAL]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [USER_CREDANTIAL]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[USER_TYPE_ACTIVITY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [USER_TYPE_ACTIVITY]
GO

/* Create Tables */

CREATE TABLE [ACHIEVEMENT]
(
	[id_achievement] int NOT NULL IDENTITY (1, 1),
	[description] varchar(max) NULL,
	[id_achievement_type] int NOT NULL
)
GO

CREATE TABLE [ACHIEVEMENT_LIST]
(
	[id_achievement] int NOT NULL,
	[id_user] int NOT NULL,
	[create_date] datetime2(7) NOT NULL
)
GO

CREATE TABLE [ACHIEVEMENT_TYPE]
(
	[id_achievement_type] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL,
	[picture] image NULL,
	[update_date] datetime2(7) NOT NULL
)
GO

CREATE TABLE [DISH]
(
	[id_dish] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL,
	[discription] varchar(max) NULL,
	[id_dish_type] int NOT NULL,
	[id_owner] varchar(50) NOT NULL,
	[total_proteins] varchar(50) NOT NULL,
	[total_fat] varchar(50) NOT NULL,
	[total_carbs] varchar(50) NOT NULL,
	[total_ccal] varchar(50) NOT NULL,
	[total_sugar] varchar(50) NULL,
	[total_amount_water] varchar(50) NULL,
	[modification_date] datetime2(7) NOT NULL,
	[id_user] int NULL
)
GO

CREATE TABLE [DISH_CATEGORY]
(
	[id_dish_type] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL,
	[picture] image NULL
)
GO

CREATE TABLE [EATING]
(
	[id_eating] int NOT NULL IDENTITY (1, 1),
	[id_user] int NOT NULL,
	[date_of_eating] datetime2(7) NOT NULL,
	[proteins] real NOT NULL,
	[fat] real NOT NULL,
	[carbs] real NOT NULL,
	[ccal] real NOT NULL,
	[sugar] real NULL,
	[amount_of_water] real NULL
)
GO

CREATE TABLE [FAVORITE_LIST]
(
	[id_user] int NOT NULL,
	[id_dish] int NOT NULL,
	[id_time] int NULL
)
GO

CREATE TABLE [FOOD]
(
	[id_food] int NOT NULL IDENTITY (1, 1),
	[id_food_category] int NOT NULL,
	[name] varchar(50) NOT NULL,
	[proteins] real NOT NULL,
	[fat] real NOT NULL,
	[carbs] real NOT NULL,
	[ccal] real NOT NULL,
	[sugar] real NULL,
	[id_consistency] int NOT NULL,
	[amount_of_water] real NULL,
	[picture] image NULL
)
GO

CREATE TABLE [FOOD_CATEGORY]
(
	[id_food_category] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL,
	[picture] image NULL,
	[modification_date] datetime2(7) NOT NULL
)
GO

CREATE TABLE [FOOD_CONSISTENCY_TYPE]
(
	[id_consistency_type] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL
)
GO

CREATE TABLE [M2M_DISH_EATING]
(
	[id_dish] int NOT NULL,
	[id_eating] int NOT NULL,
	[amount] real NOT NULL
)
GO

CREATE TABLE [M2M_DISH_TIME]
(
	[id_time] int NOT NULL,
	[id_dish] int NOT NULL
)
GO

CREATE TABLE [PORTION_FOOD]
(
	[id_food] int NOT NULL,
	[id_dish] int NOT NULL,
	[amount] real NOT NULL
)
GO

CREATE TABLE [TIME]
(
	[id_time] int NOT NULL IDENTITY (1, 1),
	[dbegin] time(7) NOT NULL,
	[dend] time(7) NOT NULL,
	[name] varchar(50) NOT NULL
)
GO

CREATE TABLE [USER]
(
	[id_user] int NOT NULL IDENTITY (1, 1),
	[first_name] varchar(50) NOT NULL,
	[last_name] varchar(50) NOT NULL,
	[date_of_birth] date NOT NULL,
	[sex] bit NOT NULL,
	[id_type_activity] int NULL
)
GO

CREATE TABLE [USER_CHARACTERISTICS]
(
	[id_user_characteristics] int NOT NULL IDENTITY (1, 1),
	[data_update] datetime2(7) NOT NULL,
	[value] real NOT NULL,
	[id_user_characteristic_ref] int NULL,
	[id_user] int NULL
)
GO

CREATE TABLE [USER_CHARACTERISTICS_REF]
(
	[id_user_characteristic_ref] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL
)
GO

CREATE TABLE [USER_CREDANTIAL]
(
	[id_user_credantial] int NOT NULL,
	[email] varchar(50) NOT NULL,
	[login] varchar(50) NOT NULL,
	[password] varchar(50) NOT NULL,
	[phone] varchar(50) NOT NULL
)
GO

CREATE TABLE [USER_TYPE_ACTIVITY]
(
	[id_type_activity] int NOT NULL IDENTITY (1, 1),
	[name] varchar(50) NOT NULL,
	[description] varchar(max) NULL
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [ACHIEVEMENT] 
 ADD CONSTRAINT [PK_ACHIEVEMENT]
	PRIMARY KEY CLUSTERED ([id_achievement] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_ACHIEVEMENT_ACHIEVEMENT_TYPE] 
 ON [ACHIEVEMENT] ([id_achievement_type] ASC)
GO

ALTER TABLE [ACHIEVEMENT_LIST] 
 ADD CONSTRAINT [PK_ACHIEVEMENT_LIST]
	PRIMARY KEY CLUSTERED ([id_user] ASC,[id_achievement] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_ACHIEVEMENT_LIST_ACHIEVEMENT] 
 ON [ACHIEVEMENT_LIST] ([id_achievement] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_ACHIEVEMENT_LIST_USER] 
 ON [ACHIEVEMENT_LIST] ([id_user] ASC)
GO

ALTER TABLE [ACHIEVEMENT_TYPE] 
 ADD CONSTRAINT [PK_ACHIEVEMENT_TYPE]
	PRIMARY KEY CLUSTERED ([id_achievement_type] ASC)
GO

ALTER TABLE [DISH] 
 ADD CONSTRAINT [PK_DISH]
	PRIMARY KEY CLUSTERED ([id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_DISH_DISH_CATEGORY] 
 ON [DISH] ([id_dish_type] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_DISH_USER] 
 ON [DISH] ([id_user] ASC)
GO

ALTER TABLE [DISH_CATEGORY] 
 ADD CONSTRAINT [PK_DISH_CATEGORY]
	PRIMARY KEY CLUSTERED ([id_dish_type] ASC)
GO

ALTER TABLE [EATING] 
 ADD CONSTRAINT [PK_EATING]
	PRIMARY KEY CLUSTERED ([id_eating] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_EATING_USER] 
 ON [EATING] ([id_user] ASC)
GO

ALTER TABLE [FAVORITE_LIST] 
 ADD CONSTRAINT [PK_FAVORITE_LIST]
	PRIMARY KEY CLUSTERED ([id_user] ASC,[id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_FAVORITE_LIST_DISH] 
 ON [FAVORITE_LIST] ([id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_FAVORITE_LIST_TIME] 
 ON [FAVORITE_LIST] ([id_time] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_FAVORITE_LIST_USER] 
 ON [FAVORITE_LIST] ([id_user] ASC)
GO

ALTER TABLE [FOOD] 
 ADD CONSTRAINT [PK_FOOD]
	PRIMARY KEY CLUSTERED ([id_food] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_FOOD_FOOD_CATEGORY] 
 ON [FOOD] ([id_food_category] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_FOOD_FOOD_CONSISTENCY_TYPE] 
 ON [FOOD] ([id_consistency] ASC)
GO

ALTER TABLE [FOOD_CATEGORY] 
 ADD CONSTRAINT [PK_FOOD_CATEGORY]
	PRIMARY KEY CLUSTERED ([id_food_category] ASC)
GO

ALTER TABLE [FOOD_CONSISTENCY_TYPE] 
 ADD CONSTRAINT [PK_FOOD_CONSISTENCY_TYPE]
	PRIMARY KEY CLUSTERED ([id_consistency_type] ASC)
GO

ALTER TABLE [M2M_DISH_EATING] 
 ADD CONSTRAINT [PK_M2M_DISH_EATING]
	PRIMARY KEY CLUSTERED ([id_eating] ASC,[id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_M2M_DISH_EATING_DISH] 
 ON [M2M_DISH_EATING] ([id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_M2M_DISH_EATING_EATING] 
 ON [M2M_DISH_EATING] ([id_eating] ASC)
GO

ALTER TABLE [M2M_DISH_TIME] 
 ADD CONSTRAINT [PK_M2M_DISH_TIME]
	PRIMARY KEY CLUSTERED ([id_time] ASC,[id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_M2M_DISH_TIME_DISH] 
 ON [M2M_DISH_TIME] ([id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_M2M_DISH_TIME_TIME] 
 ON [M2M_DISH_TIME] ([id_time] ASC)
GO

ALTER TABLE [PORTION_FOOD] 
 ADD CONSTRAINT [PK_PORTION_FOOD]
	PRIMARY KEY CLUSTERED ([id_food] ASC,[id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_PORTION_FOOD_DISH] 
 ON [PORTION_FOOD] ([id_dish] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_PORTION_FOOD_FOOD] 
 ON [PORTION_FOOD] ([id_food] ASC)
GO

ALTER TABLE [TIME] 
 ADD CONSTRAINT [PK_TIME]
	PRIMARY KEY CLUSTERED ([id_time] ASC)
GO

ALTER TABLE [USER] 
 ADD CONSTRAINT [PK_USER]
	PRIMARY KEY CLUSTERED ([id_user] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_USER_USER_TYPE_ACTIVITY] 
 ON [USER] ([id_type_activity] ASC)
GO

ALTER TABLE [USER_CHARACTERISTICS] 
 ADD CONSTRAINT [PK_USER_CHARACTERISTICS]
	PRIMARY KEY CLUSTERED ([id_user_characteristics] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_USER_CHARACTERISTICS_USER] 
 ON [USER_CHARACTERISTICS] ([id_user] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_USER_CHARACTERISTICS_USER_CHARACTERISTICS_REF] 
 ON [USER_CHARACTERISTICS] ([id_user_characteristic_ref] ASC)
GO

ALTER TABLE [USER_CHARACTERISTICS_REF] 
 ADD CONSTRAINT [PK_USER_CHARACTERISTICS_REF]
	PRIMARY KEY CLUSTERED ([id_user_characteristic_ref] ASC)
GO

ALTER TABLE [USER_CREDANTIAL] 
 ADD CONSTRAINT [PK_USER_CREDANTIAL]
	PRIMARY KEY CLUSTERED ([id_user_credantial] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_USER_CREDANTIAL_USER] 
 ON [USER_CREDANTIAL] ([id_user_credantial] ASC)
GO

ALTER TABLE [USER_TYPE_ACTIVITY] 
 ADD CONSTRAINT [PK_USER_TYPE_ACTIVITY]
	PRIMARY KEY CLUSTERED ([id_type_activity] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [ACHIEVEMENT] ADD CONSTRAINT [FK_ACHIEVEMENT_ACHIEVEMENT_TYPE]
	FOREIGN KEY ([id_achievement_type]) REFERENCES [ACHIEVEMENT_TYPE] ([id_achievement_type]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [ACHIEVEMENT_LIST] ADD CONSTRAINT [FK_ACHIEVEMENT_LIST_ACHIEVEMENT]
	FOREIGN KEY ([id_achievement]) REFERENCES [ACHIEVEMENT] ([id_achievement]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [ACHIEVEMENT_LIST] ADD CONSTRAINT [FK_ACHIEVEMENT_LIST_USER]
	FOREIGN KEY ([id_user]) REFERENCES [USER] ([id_user]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [DISH] ADD CONSTRAINT [FK_DISH_DISH_CATEGORY]
	FOREIGN KEY ([id_dish_type]) REFERENCES [DISH_CATEGORY] ([id_dish_type]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [DISH] ADD CONSTRAINT [FK_DISH_USER]
	FOREIGN KEY ([id_user]) REFERENCES [USER] ([id_user]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [EATING] ADD CONSTRAINT [FK_EATING_USER]
	FOREIGN KEY ([id_user]) REFERENCES [USER] ([id_user]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [FAVORITE_LIST] ADD CONSTRAINT [FK_FAVORITE_LIST_DISH]
	FOREIGN KEY ([id_dish]) REFERENCES [DISH] ([id_dish]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [FAVORITE_LIST] ADD CONSTRAINT [FK_FAVORITE_LIST_TIME]
	FOREIGN KEY ([id_time]) REFERENCES [TIME] ([id_time]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [FAVORITE_LIST] ADD CONSTRAINT [FK_FAVORITE_LIST_USER]
	FOREIGN KEY ([id_user]) REFERENCES [USER] ([id_user]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [FOOD] ADD CONSTRAINT [FK_FOOD_FOOD_CATEGORY]
	FOREIGN KEY ([id_food_category]) REFERENCES [FOOD_CATEGORY] ([id_food_category]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [FOOD] ADD CONSTRAINT [FK_FOOD_FOOD_CONSISTENCY_TYPE]
	FOREIGN KEY ([id_consistency]) REFERENCES [FOOD_CONSISTENCY_TYPE] ([id_consistency_type]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [M2M_DISH_EATING] ADD CONSTRAINT [FK_M2M_DISH_EATING_DISH]
	FOREIGN KEY ([id_dish]) REFERENCES [DISH] ([id_dish]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [M2M_DISH_EATING] ADD CONSTRAINT [FK_M2M_DISH_EATING_EATING]
	FOREIGN KEY ([id_eating]) REFERENCES [EATING] ([id_eating]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [M2M_DISH_TIME] ADD CONSTRAINT [FK_M2M_DISH_TIME_DISH]
	FOREIGN KEY ([id_dish]) REFERENCES [DISH] ([id_dish]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [M2M_DISH_TIME] ADD CONSTRAINT [FK_M2M_DISH_TIME_TIME]
	FOREIGN KEY ([id_time]) REFERENCES [TIME] ([id_time]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [PORTION_FOOD] ADD CONSTRAINT [FK_PORTION_FOOD_DISH]
	FOREIGN KEY ([id_dish]) REFERENCES [DISH] ([id_dish]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [PORTION_FOOD] ADD CONSTRAINT [FK_PORTION_FOOD_FOOD]
	FOREIGN KEY ([id_food]) REFERENCES [FOOD] ([id_food]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [USER] ADD CONSTRAINT [FK_USER_USER_TYPE_ACTIVITY]
	FOREIGN KEY ([id_type_activity]) REFERENCES [USER_TYPE_ACTIVITY] ([id_type_activity]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [USER_CHARACTERISTICS] ADD CONSTRAINT [FK_USER_CHARACTERISTICS_USER]
	FOREIGN KEY ([id_user]) REFERENCES [USER] ([id_user]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [USER_CHARACTERISTICS] ADD CONSTRAINT [FK_USER_CHARACTERISTICS_USER_CHARACTERISTICS_REF]
	FOREIGN KEY ([id_user_characteristic_ref]) REFERENCES [USER_CHARACTERISTICS_REF] ([id_user_characteristic_ref]) ON DELETE No Action ON UPDATE No Action
GO

/* Create Table Comments */

EXEC sp_addextendedproperty 'MS_Description', 'Блюдо(непосредственно то что мы будем есть) (PK)id_dish -  сурогатный ключ name - наименование (FK) id_dish_type - тип блюда  id_owner - кто создал блюдо, по умолчанию это будет система(например айдишник 1), в дальнейшем будет использоваться для определения кастомный блюд на сервере. data - дата последнего изменения блюда, добавлена чтобы можно было определить когда надо обновлять данные на телефоне', 'Schema', [dbo], 'table', [DISH]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Тип блюда. (Суп, жаркое, мороженное и тд) (PK) id_dish_type -  сурогатный ключ name - наименование типа picture - изображение категории блюда', 'Schema', [dbo], 'table', [DISH_CATEGORY]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Приём пищи (PK)id_eating - сурогатный ключ (FK)id_user - какой пользователь употребил datatime(DATATIME) - дата и время употребления пищи proteins - реальное количество употреблённого белка fat - реальное количество употреблённого жира carbs - реальное количество употреблённых углеводов sugar - реальное количество употреблённого сахара ccal - реальное количество употреблённых калорий amount_water - реальное количество употреблённого объёма воды', 'Schema', [dbo], 'table', [EATING]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Список предпочитаемых блюд. Нужно для сортировки (pFK)id_user -  пользователь (pFK)id_dish - блюдо (FK)id_time -  время в которое пользователь предпочитает этот продукт', 'Schema', [dbo], 'table', [FAVORITE_LIST]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Непостредственно сам тип продукта. (PK) id - Сурогадный ключ (FK) id_category -  категория продукта name - название продукта proteins -  колличсевто белка на 100г продукта fat - колличсевто жира на 100г продукта carbs -  колличество углеводов на 100г продукта ccal - энергетическая ценность на 100г продукта (ккал) sugar - содержание сахаран на 100г продукта (FK) id_type - тип продукта (жидкий/твёрдый) amount_of_water - количество воды на 100г продукта picture - графическое представление продукта', 'Schema', [dbo], 'table', [FOOD]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Категория еды необходима для интелектуальной сортировки продуктов. Вынесена в отдельную таблицу для избежания разницы именования. (PK)id_category - сурогатный ключ name - наименование категории image - обобщёное изображение категории', 'Schema', [dbo], 'table', [FOOD_CATEGORY]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Справочная таблица Константы: Твёрдая Жидкая', 'Schema', [dbo], 'table', [FOOD_CONSISTENCY_TYPE]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Таблица М2М  содержит какие блюда входят в приём пищи', 'Schema', [dbo], 'table', [M2M_DISH_EATING]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Таблица содержит предпочтительное время для блюда. Это критерий сортировки блюд', 'Schema', [dbo], 'table', [M2M_DISH_TIME]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Решает вопрос отношения M2M. Порция продукта реально употребляемая в блюде. (pFK) id_food -  продукт (pFK)id_dish -  блюдо amount - реальное количество используемое в блюде', 'Schema', [dbo], 'table', [PORTION_FOOD]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Таблица времени(периода) приёма пищи (PK)id_time - сурогатный ключ begin - время начала периода end - время конца периода name - наименование(обед/ужин/полдник итд)', 'Schema', [dbo], 'table', [TIME]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Таблица личных данных пользователя (PK) id_user -  сурогатный ключ first_name - Имя пользователя second_name - Фамилия пользователя date_of_birth(DATE) - возраст пользователя (лучше хранить дату рождения и самим высчитывать) sex(BOOL) - пол пользователя (1-M, 0 - Ж)  id_type_activity - тип активности пользователя на текущий момент', 'Schema', [dbo], 'table', [USER]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Реальное значение характеристики пользователя, с датой добавления.  Характеристики были выделены в такую таблицу чтобы решить проблему хранения динамики характеристик пользователя, без многократного дублирования информации', 'Schema', [dbo], 'table', [USER_CHARACTERISTICS]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Список всех характеристик пользователя  height - рост пользователя weight - вес пользователя dmi - индекс массы тела (ИМТ)  Дополнительные антропометрические данные: underbust circumference - Объем под грудью (4 women)  bust circumference - Объем груди (4 women)  - включая молочные железы chest circumference ->Объем груди (4 men) waist circumference - Объем талии.   hips circumference - Объем ягодиц.  thigh circumference - Объем бедра. knee circumference - Объем колена.  calf circumference - Объем голени.  shoulder circumference - Объем плеча. menstrual cycle length - Для женщин фаза МЦ', 'Schema', [dbo], 'table', [USER_CHARACTERISTICS_REF]
GO
